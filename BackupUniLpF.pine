//@version=6
indicator(title="Uniswap V3 Liquidity Range Indicator with Fibonacci (Enhanced)", shorttitle="UniV3 Fib Enhanced", overlay=true)

// Helper function to create a format string for str.tostring
f_get_price_format(num_decimals) =>
    string fmt = "0."
    if num_decimals == 0 // Handle case for 0 decimals
        fmt := "0"
    else
        for i = 1 to num_decimals // Loop 'num_decimals' times
            fmt := fmt + "0"
    fmt

// Helper function to format duration (remains the same)
f_format_duration(total_seconds, unit_preference) =>
    string result = ""
    if total_seconds < 1.0 
        result := "<1s"
    else
        switch unit_preference
            "Weeks" =>
                float weeks = total_seconds / (86400.0 * 7.0)
                result := str.tostring(math.round(weeks, 1)) + "w"
            "Days" =>
                float days = total_seconds / 86400.0
                result := str.tostring(math.round(days, 1)) + "d"
            "Hours" =>
                float hours = total_seconds / 3600.0
                result := str.tostring(math.round(hours, 1)) + "h"
            "Minutes" =>
                float minutes = total_seconds / 60.0
                result := str.tostring(math.round(minutes, 0)) + "m"
            => 
                float days_raw = total_seconds / 86400.0
                float weeks_raw = days_raw / 7.0
                if weeks_raw >= 1.0
                    result := str.tostring(math.round(weeks_raw, 1)) + "w"
                else if days_raw >= 1.0
                    result := str.tostring(math.round(days_raw, 1)) + "d"
                else
                    float hours_raw = total_seconds / 3600.0
                    if hours_raw >= 1.0
                        result := str.tostring(math.round(hours_raw, 1)) + "h"
                    else
                        float minutes_raw = total_seconds / 60.0
                        if minutes_raw >= 1.0
                            result := str.tostring(math.round(minutes_raw, 0)) + "m"
                        else
                            result := str.tostring(math.round(total_seconds, 0)) + "s"
    result

// Inputs
N = input.int(30, title="Volatility Window Size", minval=1)
K = input.float(6.28, title="Multiplier", minval=0)
decimals = input.int(4, title="Price Decimals", minval=0, maxval=8) // Maxval 8 for safety with format
table_position = input.string("top_right", title="Table Position", options=["top_left", "top_right", "bottom_left", "bottom_right", "middle_left", "middle_right"])
duration_display_unit = input.string("Auto", title="Rebalance Duration Unit", options=["Auto", "Weeks", "Days", "Hours", "Minutes"], tooltip="Choose how the duration of each range is displayed on the rebalance label.")
show_preview_range = input.bool(true, title="Show Preview Range", tooltip="Show a hypothetical range based on the current price and volatility.")

// Inputs for Proactive Rebalance Strategy
proactive_signal_enabled = input.bool(true, title="Enable Proactive Rebalance Signal", group="Proactive Rebalance Strategy")
proactive_middle_dev_pct = input.float(25.0, title="Middle Deviation % for Signal", minval=0, step=1, group="Proactive Rebalance Strategy", tooltip="Trigger signal if current price deviates from active middle by this % of active range width.")
proactive_width_diff_pct = input.float(30.0, title="Width Difference % for Signal", minval=0, step=1, group="Proactive Rebalance Strategy", tooltip="Trigger signal if preview range width differs from active range width by this %.")

price_format = f_get_price_format(decimals) // Get the format string once

// Calculate log return
log_return = math.log(close / close[1])
sigma = ta.stdev(log_return, N)

// Declare persistent variables for active range
var float middle                   = na
var float lower                    = na
var float upper                    = na
var float fib236                   = na
var float fib382                   = na
var float fib618                   = na
var float fib786                   = na
var float entry_price_on_rebalance = na
var int prev_rebalance_time_ms   = na 
var bool forced_rebalance_this_bar = false 

actual_current_preview_middle = show_preview_range and not na(sigma) ? close : na
actual_current_preview_lower  = show_preview_range and not na(sigma) ? close * math.exp(-K * sigma) : na
actual_current_preview_upper  = show_preview_range and not na(sigma) ? close * math.exp(K * sigma) : na

forced_rebalance_this_bar := false 
if not na(sigma)
    if na(middle) or close > upper or close < lower
        middle := close
        lower  := middle * math.exp(-K * sigma)
        upper  := middle * math.exp(K * sigma)
        fib236 := middle * math.exp(K * sigma * (2 * 0.236 - 1))
        fib382 := middle * math.exp(K * sigma * (2 * 0.382 - 1))
        fib618 := middle * math.exp(K * sigma * (2 * 0.618 - 1))
        fib786 := middle * math.exp(K * sigma * (2 * 0.786 - 1))
        entry_price_on_rebalance := middle
        forced_rebalance_this_bar := true 
        string duration_info_for_label = ""
        current_rebalance_time_ms = time 
        if not na(prev_rebalance_time_ms)
            duration_ms = current_rebalance_time_ms - prev_rebalance_time_ms
            if duration_ms > 0 
                total_seconds_elapsed = duration_ms / 1000.0 
                duration_info_for_label := "\nLasted: " + f_format_duration(total_seconds_elapsed, duration_display_unit)
        else
            duration_info_for_label := "\n(Initial Range)" 
        prev_rebalance_time_ms := current_rebalance_time_ms 
        label_text = "Rebalance\nEntry: " + str.tostring(middle, price_format) + duration_info_for_label // Corrected format
        label.new(bar_index, high, label_text, color=color.new(color.red, 25), textcolor=color.white, style=label.style_label_down)

bool trigger_proactive_signal = false
string proactive_signal_reason_text = ""
string proactive_range_text = ""
if proactive_signal_enabled and show_preview_range and not na(middle) and not na(actual_current_preview_middle) and not forced_rebalance_this_bar and (close < upper and close > lower)
    active_range_width = upper - lower
    preview_range_width = actual_current_preview_upper - actual_current_preview_lower
    if active_range_width > 0 
        middle_deviation = math.abs(middle - actual_current_preview_middle)
        middle_deviation_as_pct_of_width = (middle_deviation / active_range_width) * 100
        if middle_deviation_as_pct_of_width >= proactive_middle_dev_pct
            trigger_proactive_signal := true
            proactive_signal_reason_text := "Mid Dev: " + str.tostring(math.round(middle_deviation_as_pct_of_width,1)) + "%"
    if not trigger_proactive_signal and active_range_width > 0 and preview_range_width > 0 
        width_difference = math.abs(preview_range_width - active_range_width)
        width_difference_as_pct_of_active = (width_difference / active_range_width) * 100
        if width_difference_as_pct_of_active >= proactive_width_diff_pct
            trigger_proactive_signal := true
            proactive_signal_reason_text := (preview_range_width > active_range_width ? "Wider Preview: " : "Narrower Preview: ") + str.tostring(math.round(width_difference_as_pct_of_active,1)) + "%"
    if trigger_proactive_signal 
        proactive_range_text := "\nNew Mid: " + str.tostring(actual_current_preview_middle, price_format) +  // Corrected format
                               "\nNew Low: " + str.tostring(actual_current_preview_lower, price_format) + // Corrected format
                               "\nNew Upp: " + str.tostring(actual_current_preview_upper, price_format)  // Corrected format
if trigger_proactive_signal
    string full_proactive_label_text = "Proactive?\n" + proactive_signal_reason_text + proactive_range_text
    label.new(bar_index, low - (high-low)*0.1, full_proactive_label_text, color=color.new(color.aqua, 20), textcolor=color.black, style=label.style_label_up, tooltip="Consider proactive rebalance. Current range may be off-center or misaligned with current volatility.")
alertcondition(trigger_proactive_signal, title="Proactive Rebalance Signal", message="Uniswap V3: Consider proactive rebalance.")

// --- Plotting ---
plot(middle, title="Middle (Current Range Center)", color=color.new(color.blue, 0), style=plot.style_linebr)
plot(lower, title="Lower Band", color=color.new(color.red, 0), style=plot.style_linebr)
plot(upper, title="Upper Band", color=color.new(color.green, 0), style=plot.style_linebr)
plot(close, title="Close", color=color.new(color.gray, 50))
plot(fib236, title="Fib 23.6%", color=color.new(color.orange, 0), style=plot.style_linebr)
plot(fib382, title="Fib 38.2%", color=color.new(color.yellow, 0), style=plot.style_linebr)
plot(fib618, title="Fib 61.8%", color=color.new(color.aqua, 0), style=plot.style_linebr)
plot(fib786, title="Fib 78.6%", color=color.new(color.fuchsia, 0), style=plot.style_linebr)
plot(entry_price_on_rebalance, title="Entry Price (at Rebalance)", color=color.new(color.purple, 0), style=plot.style_linebr, linewidth=2)

float series_to_plot_preview_middle = na
float series_to_plot_preview_lower  = na
float series_to_plot_preview_upper  = na
int   preview_plot_linewidth = 1 
if show_preview_range 
    if proactive_signal_enabled
        series_to_plot_preview_middle := actual_current_preview_middle
        series_to_plot_preview_lower  := actual_current_preview_lower
        series_to_plot_preview_upper  := actual_current_preview_upper
        preview_plot_linewidth := 1 
    else
        series_to_plot_preview_middle := barstate.islast ? actual_current_preview_middle : na
        series_to_plot_preview_lower  := barstate.islast ? actual_current_preview_lower  : na
        series_to_plot_preview_upper  := barstate.islast ? actual_current_preview_upper  : na
        preview_plot_linewidth := 2 
plot(series=series_to_plot_preview_middle, title="Preview Middle", color=color.new(color.gray, 30), style=plot.style_line, linewidth=preview_plot_linewidth) 
plot(series=series_to_plot_preview_lower, title="Preview Lower", color=color.new(color.orange, 30), style=plot.style_line, linewidth=preview_plot_linewidth)
plot(series=series_to_plot_preview_upper, title="Preview Upper", color=color.new(color.teal, 30), style=plot.style_line, linewidth=preview_plot_linewidth)

// --- Table ---
var table trigger_table = na 
if barstate.isfirst 
    trigger_table := table.new(position.top_right, 2, 6, border_width=1, border_color=color.gray)
if not na(trigger_table) 
    if not na(lower) and not na(upper) and not na(entry_price_on_rebalance)
        table.cell(trigger_table, 0, 0, "Lower Trigger:", text_halign=text.align_left, bgcolor=color.white, text_color=color.black)
        table.cell(trigger_table, 1, 0, str.tostring(lower, price_format), text_halign=text.align_right, bgcolor=color.white, text_color=color.black) // Corrected format
        table.cell(trigger_table, 0, 1, "Upper Trigger:", text_halign=text.align_left, bgcolor=color.white, text_color=color.black)
        table.cell(trigger_table, 1, 1, str.tostring(upper, price_format), text_halign=text.align_right, bgcolor=color.white, text_color=color.black) // Corrected format
        table.cell(trigger_table, 0, 2, "Entry Price:", text_halign=text.align_left, bgcolor=color.white, text_color=color.black)
        table.cell(trigger_table, 1, 2, str.tostring(entry_price_on_rebalance, price_format), text_halign=text.align_right, bgcolor=color.white, text_color=color.black) // Corrected format
    
    string preview_lower_str = not na(actual_current_preview_lower) ? str.tostring(actual_current_preview_lower, price_format) : "" // Corrected format
    string preview_middle_str = not na(actual_current_preview_middle) ? str.tostring(actual_current_preview_middle, price_format) : "" // Corrected format
    string preview_upper_str = not na(actual_current_preview_upper) ? str.tostring(actual_current_preview_upper, price_format) : "" // Corrected format

    table.cell(trigger_table, 0, 3, show_preview_range ? "Preview Lower:" : "", text_halign=text.align_left, bgcolor=color.new(color.gray, 90), text_color=color.black)
    table.cell(trigger_table, 1, 3, preview_lower_str, text_halign=text.align_right, bgcolor=color.new(color.gray, 90), text_color=color.black)
    table.cell(trigger_table, 0, 4, show_preview_range ? "Preview Middle:" : "", text_halign=text.align_left, bgcolor=color.new(color.gray, 90), text_color=color.black)
    table.cell(trigger_table, 1, 4, preview_middle_str, text_halign=text.align_right, bgcolor=color.new(color.gray, 90), text_color=color.black)
    table.cell(trigger_table, 0, 5, show_preview_range ? "Preview Upper:" : "", text_halign=text.align_left, bgcolor=color.new(color.gray, 90), text_color=color.black)
    table.cell(trigger_table, 1, 5, preview_upper_str, text_halign=text.align_right, bgcolor=color.new(color.gray, 90), text_color=color.black)

    var string current_table_pos_setting = table_position 
    if current_table_pos_setting != table_position or barstate.isfirst
        actual_pos = position.top_right 
        if table_position == "top_left"
            actual_pos := position.top_left
        else if table_position == "bottom_left"
            actual_pos := position.bottom_left
        else if table_position == "bottom_right"
            actual_pos := position.bottom_right
        else if table_position == "middle_left"
            actual_pos := position.middle_left
        else if table_position == "middle_right"
            actual_pos := position.middle_right
        if not na(trigger_table) 
            table.set_position(trigger_table, actual_pos)
        current_table_pos_setting := table_position
