Pine Script v6: The plot Function
The plot function is a fundamental tool in Pine Script for visualizing data series directly on your chart. It allows you to draw lines, histograms, crosses, areas, and more, representing various calculated values from your script. Understanding how to use plot effectively is crucial for creating insightful indicators and strategies.

Purpose
The primary purpose of plot is to display a numerical series as a visual element on the chart's main pane or on a sub-pane. This series can be a price, an indicator value, a moving average, or any other calculated numerical data.

Syntax
plot(series, title, color, linewidth, style, trackprice, histbase, offset, display, editable, show_last, join, transp)

Parameters
Here's a detailed breakdown of each parameter for the plot function in Pine Script v6:

series (series int/float/bool):

Required. This is the data series you want to plot. It can be any numerical series (e.g., close, open, high, low, volume, ta.sma(close, 20), or a custom calculated variable).

If a bool series is provided, true is plotted as 1 and false as 0.

title (string):

Optional. A string that identifies the plot in the indicator's settings (Style tab) and in the Data Window.

Default: "Plot".

Example: plot(close, title="Closing Price")

color (series color):

Optional. The color of the plot. It can be a constant color (e.g., color.blue), or a series color that changes dynamically based on conditions (e.g., close > open ? color.green : color.red).

Default: color.blue.

Example: plot(ta.sma(close, 20), color=color.purple)

Dynamic Color: plot(close, color=close > open ? color.lime : color.red)

linewidth (series int):

Optional. The thickness of the plot line. Accepts integer values from 1 to 4.

Default: 1.

Example: plot(close, linewidth=2)

style (series string):

Optional. Defines the visual style of the plot. Can be one of the following built-in constants:

plot.style_line (default)

plot.style_stepline

plot.style_histogram

plot.style_cross

plot.style_area

plot.style_columns

plot.style_circles

plot.style_linebr (line with breaks for na values)

plot.style_areabr (area with breaks for na values)

Example: plot(volume, style=plot.style_histogram, color=color.gray)

trackprice (series bool):

Optional. If true, a horizontal line will be drawn from the last plotted value to the price axis, showing the current value.

Default: false.

Example: plot(ta.sma(close, 50), trackprice=true)

histbase (series float):

Optional. Applicable only to plot.style_histogram, plot.style_area, plot.style_columns, and plot.style_areabr.

Defines the base level from which the histogram or area is drawn. If not specified, the base is typically 0 or the lowest/highest value on the visible chart.

Example: plot(close - open, style=plot.style_histogram, histbase=0)

offset (series int):

Optional. Shifts the plot horizontally by the specified number of bars. A positive value shifts to the right (future), a negative value shifts to the left (past).

Default: 0.

Example: plot(close, offset=10, title="Close shifted 10 bars right")

display (series int):

Optional. Controls when the plot is displayed. Can be:

display.none: Plot is not displayed.

display.all (default): Plot is always displayed.

display.pane: Plot is displayed only on the current pane.

display.data_window: Plot is displayed only in the Data Window (not on chart).

Example: plot(close, display=display.data_window)

editable (series bool):

Optional. If false, the plot's properties (color, linewidth, style) cannot be changed by the user in the indicator's settings.

Default: true.

Example: plot(close, editable=false)

show_last (series int):

Optional. Specifies the number of last bars on which the plot should be drawn. Useful for drawing only recent data.

Default: na (draws on all available bars).

Example: plot(close, show_last=100)

join (series bool):

Optional. Applicable only to plot.style_line and plot.style_stepline.

If true (default), lines connect across na values. If false, lines break at na values.

plot.style_linebr and plot.style_areabr implicitly handle na values by breaking the line/area.

Default: true.

Example: plot(mySeriesWithNa, join=false)

transp (series int):

Optional. The transparency of the plot, from 0 (fully opaque) to 100 (fully transparent).

Default: 0.

Example: plot(ta.sma(close, 200), transp=50)

Examples
1. Basic Line Plot
//@version=6
indicator("Simple Close Plot", overlay=true)

plot(close, title="Close Price", color=color.blue, linewidth=2)

2. Moving Average with Dynamic Color
//@version=6
indicator("SMA with Color Change", overlay=true)

ma20 = ta.sma(close, 20)
ma50 = ta.sma(close, 50)

maColor = if ma20 > ma50
    color.green
else
    color.red

plot(ma20, title="SMA 20", color=maColor, linewidth=2)
plot(ma50, title="SMA 50", color=color.orange, linewidth=1)

3. Histogram Plot for Volume
//@version=6
indicator("Volume Histogram", overlay=false) // overlay=false to plot on a separate pane

plot(volume, title="Volume", style=plot.style_histogram, color=color.new(color.gray, 20), transp=20)

4. Area Plot with Base and Transparency
//@version=6
indicator("Price Range Area", overlay=true)

// Calculate the difference between high and low
priceRange = high - low

// Plot the area from the low price up to the high price
plot(high, title="High-Low Area", style=plot.style_area, histbase=low, color=color.new(color.purple, 70))

5. Plotting Crosses for Specific Events
//@version=6
indicator("Crosses on Crossover", overlay=true)

ma10 = ta.sma(close, 10)
ma20 = ta.sma(close, 20)

// Plot a cross when MA10 crosses above MA20
plot(ta.cross(ma10, ma20) ? ma10 : na, title="Crossover", style=plot.style_cross, color=color.lime, linewidth=3)

// Plot the MAs themselves
plot(ma10, title="MA 10", color=color.blue)
plot(ma20, title="MA 20", color=color.red)

6. Plotting with Offset and show_last
//@version=6
indicator("Shifted Plot", overlay=true)

// Plot current close
plot(close, title="Current Close", color=color.blue)

// Plot close shifted 5 bars to the right (future)
plot(close, title="Shifted Close", color=color.orange, offset=5, linewidth=2)

// Plot only the last 50 bars of a series
plot(ta.ema(close, 20), title="EMA Last 50", color=color.green, show_last=50)

Best Practices and Tips
overlay=true/false: Remember to set overlay=true in your indicator() declaration if you want the plot to appear on the main price chart, or overlay=false to plot it on a separate sub-pane (like volume).

Dynamic Colors: Use conditional (ternary) operators (condition ? value_if_true : value_if_false) to create plots whose colors change based on market conditions.

na for Gaps: If you want to create gaps in your plot (e.g., only plot when a condition is met), return na (not available) for the series argument when the condition is false. The plot.style_linebr and plot.style_areabr styles are specifically designed to handle na values by breaking the line/area.

Readability: Choose colors and linewidth values that make your plots clear and easy to distinguish. Avoid too many overlapping plots with similar styles.

title Parameter: Always use descriptive title parameters. This makes your indicator's settings much easier to understand and configure for users.

Performance: While plot is highly optimized, be mindful of plotting extremely complex series or an excessive number of plots in a single script, as it can impact performance, especially on lower-end devices or slower connections.

By mastering the plot function, you can effectively visualize any data generated by your Pine Script indicators and strategies, making your analysis more intuitive and actionable.