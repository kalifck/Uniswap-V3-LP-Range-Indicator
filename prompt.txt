 Enhance Chart Readability and Aesthetics
Use fill() for Ranges: Instead of just lines, use the fill() function to shade the area between the upper and lower bands. This creates a much clearer visual representation of the active liquidity range. You could use a light, transparent color for the active range and a different transparent color for the preview range.

Dynamic Line Styles: For the "Preview Range" plots, consider making the line style dashed (plot.style_dashed) by default. This makes it visually distinct from the solid lines of the active range, reducing chart clutter.

Improve Label Management: Rebalance labels can quickly clutter the chart. Consider adding an input option to limit the number of historical labels displayed, for example, showing only the last 5 rebalance events.

Refine Color Scheme: Introduce a more cohesive color palette. For instance, use cool colors (like blues and greens) for the active range and its Fibonacci levels, and warmer colors (like oranges and yellows) for the proactive signals and preview range to create a clear visual distinction between what is active and what is potential.

Interactive Table: Your use of a table is excellent. You could enhance it by adding a "Status" row that shows whether the current position is "In Range," "Out of Range," or has a "Proactive Signal" active. You could also change the background color of the table cells based on these states (e.g., green for in range, red for out of range).

ðŸ§¹ Improve Code Organization
Encapsulate Logic in Functions: While you use helper functions well, you could further encapsulate major logic blocks. For instance, the entire "Proactive Rebalance Strategy" could be moved into a function that takes the active and preview ranges as arguments and returns the trigger_proactive_signal boolean and the reason text. This would make the main body of the script cleaner and easier to read.

Add More tooltip Explanations: You've used tooltips well. Expand on this by adding tooltips to the Volatility Window Size and Multiplier inputs to explain how they affect the range calculation (e.g., "A larger window creates a smoother, less reactive volatility measure. A smaller window is more sensitive to recent price swings.").

Improving Predictive Accuracy and Strategy
The core of your script relies on historical volatility to set ranges. To improve its "predictive" power, you can evolve this logic to be more forward-looking and adaptive.

ðŸ“ˆ More Advanced Volatility Modeling
The current use of ta.stdev for historical volatility is a solid baseline. However, it treats all data points in the window equally and can be slow to react. Consider these alternatives:

Exponentially Weighted Volatility (EWMA): Instead of a simple standard deviation, use an Exponential Moving Average (ta.ema) of the squared log returns. This gives more weight to recent price action, making your volatility estimate sigma more responsive to changes in market conditions.

Incorporate Average True Range (ATR): ATR is a robust measure of volatility. You could use ta.atr(14) as a filter or as a component in your sigma calculation to better capture market volatility, especially during choppy or trending periods.

ðŸ’¡ Dynamic and Intelligent Range Setting
Dynamic Multiplier (K): Your current multiplier K is static. A significant enhancement would be to make K dynamic. For example, K could increase automatically during periods of high, expanding volatility (wider, safer range) and decrease during periods of low, contracting volatility (tighter, more capital-efficient range). You could tie K to a moving average of your sigma or the ATR.

Asymmetrical Ranges in Trends: Markets trend. In a strong uptrend, the price is more likely to move up than down. The current symmetrical range doesn't account for this. You could introduce a "Trend Bias" feature. For example, if the price is above the 50-period EMA, you could automatically set a wider upper range and a tighter lower range relative to the middle price.

Statistical Timeline Expectation: Your script currently shows how long the last range lasted. To make this more predictive, you can calculate and display the average or median duration of the last 10 or 20 ranges. This provides a statistically more meaningful expectation for how long a new position might remain in range. You would need to store the duration of each rebalance in an array and perform calculations on it.